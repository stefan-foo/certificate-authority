/*
 * This file is generated by jOOQ.
 */
package rs.elfak.caprovider.db.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import rs.elfak.caprovider.db.DefaultSchema;
import rs.elfak.caprovider.db.Keys;
import rs.elfak.caprovider.db.enums.RequestStatus;
import rs.elfak.caprovider.db.enums.RequestType;
import rs.elfak.caprovider.db.tables.records.CertificateRequestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CertificateRequest extends TableImpl<CertificateRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>certificate_request</code>
     */
    public static final CertificateRequest CERTIFICATE_REQUEST = new CertificateRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CertificateRequestRecord> getRecordType() {
        return CertificateRequestRecord.class;
    }

    /**
     * The column <code>certificate_request.id</code>.
     */
    public final TableField<CertificateRequestRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>certificate_request.country</code>.
     */
    public final TableField<CertificateRequestRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CHAR(2), this, "");

    /**
     * The column <code>certificate_request.state</code>.
     */
    public final TableField<CertificateRequestRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>certificate_request.name</code>.
     */
    public final TableField<CertificateRequestRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>certificate_request.organization</code>.
     */
    public final TableField<CertificateRequestRecord, String> ORGANIZATION = createField(DSL.name("organization"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>certificate_request.email</code>.
     */
    public final TableField<CertificateRequestRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CHAR(100).nullable(false), this, "");

    /**
     * The column <code>certificate_request.request_type</code>.
     */
    public final TableField<CertificateRequestRecord, RequestType> REQUEST_TYPE = createField(DSL.name("request_type"), SQLDataType.VARCHAR.asEnumDataType(rs.elfak.caprovider.db.enums.RequestType.class), this, "");

    /**
     * The column <code>certificate_request.timestamp</code>.
     */
    public final TableField<CertificateRequestRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>certificate_request.status</code>.
     */
    public final TableField<CertificateRequestRecord, RequestStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(rs.elfak.caprovider.db.enums.RequestStatus.class), this, "");

    /**
     * The column <code>certificate_request.certificate</code>.
     */
    public final TableField<CertificateRequestRecord, Integer> CERTIFICATE = createField(DSL.name("certificate"), SQLDataType.INTEGER, this, "");

    private CertificateRequest(Name alias, Table<CertificateRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private CertificateRequest(Name alias, Table<CertificateRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>certificate_request</code> table reference
     */
    public CertificateRequest(String alias) {
        this(DSL.name(alias), CERTIFICATE_REQUEST);
    }

    /**
     * Create an aliased <code>certificate_request</code> table reference
     */
    public CertificateRequest(Name alias) {
        this(alias, CERTIFICATE_REQUEST);
    }

    /**
     * Create a <code>certificate_request</code> table reference
     */
    public CertificateRequest() {
        this(DSL.name("certificate_request"), null);
    }

    public <O extends Record> CertificateRequest(Table<O> child, ForeignKey<O, CertificateRequestRecord> key) {
        super(child, key, CERTIFICATE_REQUEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<CertificateRequestRecord, Integer> getIdentity() {
        return (Identity<CertificateRequestRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CertificateRequestRecord> getPrimaryKey() {
        return Keys.CERTIFICATE_REQUEST_PKEY;
    }

    @Override
    public List<ForeignKey<CertificateRequestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CERTIFICATE_REQUEST__CERTIFICATE_REQUEST_CERTIFICATE_FKEY);
    }

    private transient Certificate _certificate;

    /**
     * Get the implicit join path to the <code>public.certificate</code> table.
     */
    public Certificate certificate() {
        if (_certificate == null)
            _certificate = new Certificate(this, Keys.CERTIFICATE_REQUEST__CERTIFICATE_REQUEST_CERTIFICATE_FKEY);

        return _certificate;
    }

    @Override
    public CertificateRequest as(String alias) {
        return new CertificateRequest(DSL.name(alias), this);
    }

    @Override
    public CertificateRequest as(Name alias) {
        return new CertificateRequest(alias, this);
    }

    @Override
    public CertificateRequest as(Table<?> alias) {
        return new CertificateRequest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CertificateRequest rename(String name) {
        return new CertificateRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CertificateRequest rename(Name name) {
        return new CertificateRequest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CertificateRequest rename(Table<?> name) {
        return new CertificateRequest(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, String, RequestType, LocalDateTime, RequestStatus, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super RequestType, ? super LocalDateTime, ? super RequestStatus, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super RequestType, ? super LocalDateTime, ? super RequestStatus, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
