/*
 * This file is generated by jOOQ.
 */
package rs.elfak.caprovider.db.tables.pojos;


import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Arrays;

import rs.elfak.caprovider.db.enums.SubjectType;
import rs.elfak.caprovider.db.tables.interfaces.ICertificate;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Certificate implements ICertificate {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String alias;
    private String subjectName;
    private byte[] subjectKeyId;
    private SubjectType subjectType;
    private byte[] certDer;
    private byte[] privateKeyEn;
    private LocalDateTime validFrom;
    private LocalDateTime validTo;
    private String revocationMessage;
    private Integer issuingCertificate;
    private BigInteger serialNumber;
    private Integer revocationCode;
    private LocalDateTime revocationDate;

    public Certificate() {}

    public Certificate(ICertificate value) {
        this.id = value.getId();
        this.alias = value.getAlias();
        this.subjectName = value.getSubjectName();
        this.subjectKeyId = value.getSubjectKeyId();
        this.subjectType = value.getSubjectType();
        this.certDer = value.getCertDer();
        this.privateKeyEn = value.getPrivateKeyEn();
        this.validFrom = value.getValidFrom();
        this.validTo = value.getValidTo();
        this.revocationMessage = value.getRevocationMessage();
        this.issuingCertificate = value.getIssuingCertificate();
        this.serialNumber = value.getSerialNumber();
        this.revocationCode = value.getRevocationCode();
        this.revocationDate = value.getRevocationDate();
    }

    public Certificate(
        Integer id,
        String alias,
        String subjectName,
        byte[] subjectKeyId,
        SubjectType subjectType,
        byte[] certDer,
        byte[] privateKeyEn,
        LocalDateTime validFrom,
        LocalDateTime validTo,
        String revocationMessage,
        Integer issuingCertificate,
        BigInteger serialNumber,
        Integer revocationCode,
        LocalDateTime revocationDate
    ) {
        this.id = id;
        this.alias = alias;
        this.subjectName = subjectName;
        this.subjectKeyId = subjectKeyId;
        this.subjectType = subjectType;
        this.certDer = certDer;
        this.privateKeyEn = privateKeyEn;
        this.validFrom = validFrom;
        this.validTo = validTo;
        this.revocationMessage = revocationMessage;
        this.issuingCertificate = issuingCertificate;
        this.serialNumber = serialNumber;
        this.revocationCode = revocationCode;
        this.revocationDate = revocationDate;
    }

    /**
     * Getter for <code>certificate.id</code>.
     */
    @Override
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>certificate.id</code>.
     */
    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>certificate.alias</code>.
     */
    @Override
    public String getAlias() {
        return this.alias;
    }

    /**
     * Setter for <code>certificate.alias</code>.
     */
    @Override
    public void setAlias(String alias) {
        this.alias = alias;
    }

    /**
     * Getter for <code>certificate.subject_name</code>.
     */
    @Override
    public String getSubjectName() {
        return this.subjectName;
    }

    /**
     * Setter for <code>certificate.subject_name</code>.
     */
    @Override
    public void setSubjectName(String subjectName) {
        this.subjectName = subjectName;
    }

    /**
     * Getter for <code>certificate.subject_key_id</code>.
     */
    @Override
    public byte[] getSubjectKeyId() {
        return this.subjectKeyId;
    }

    /**
     * Setter for <code>certificate.subject_key_id</code>.
     */
    @Override
    public void setSubjectKeyId(byte[] subjectKeyId) {
        this.subjectKeyId = subjectKeyId;
    }

    /**
     * Getter for <code>certificate.subject_type</code>.
     */
    @Override
    public SubjectType getSubjectType() {
        return this.subjectType;
    }

    /**
     * Setter for <code>certificate.subject_type</code>.
     */
    @Override
    public void setSubjectType(SubjectType subjectType) {
        this.subjectType = subjectType;
    }

    /**
     * Getter for <code>certificate.cert_der</code>.
     */
    @Override
    public byte[] getCertDer() {
        return this.certDer;
    }

    /**
     * Setter for <code>certificate.cert_der</code>.
     */
    @Override
    public void setCertDer(byte[] certDer) {
        this.certDer = certDer;
    }

    /**
     * Getter for <code>certificate.private_key_en</code>.
     */
    @Override
    public byte[] getPrivateKeyEn() {
        return this.privateKeyEn;
    }

    /**
     * Setter for <code>certificate.private_key_en</code>.
     */
    @Override
    public void setPrivateKeyEn(byte[] privateKeyEn) {
        this.privateKeyEn = privateKeyEn;
    }

    /**
     * Getter for <code>certificate.valid_from</code>.
     */
    @Override
    public LocalDateTime getValidFrom() {
        return this.validFrom;
    }

    /**
     * Setter for <code>certificate.valid_from</code>.
     */
    @Override
    public void setValidFrom(LocalDateTime validFrom) {
        this.validFrom = validFrom;
    }

    /**
     * Getter for <code>certificate.valid_to</code>.
     */
    @Override
    public LocalDateTime getValidTo() {
        return this.validTo;
    }

    /**
     * Setter for <code>certificate.valid_to</code>.
     */
    @Override
    public void setValidTo(LocalDateTime validTo) {
        this.validTo = validTo;
    }

    /**
     * Getter for <code>certificate.revocation_message</code>.
     */
    @Override
    public String getRevocationMessage() {
        return this.revocationMessage;
    }

    /**
     * Setter for <code>certificate.revocation_message</code>.
     */
    @Override
    public void setRevocationMessage(String revocationMessage) {
        this.revocationMessage = revocationMessage;
    }

    /**
     * Getter for <code>certificate.issuing_certificate</code>.
     */
    @Override
    public Integer getIssuingCertificate() {
        return this.issuingCertificate;
    }

    /**
     * Setter for <code>certificate.issuing_certificate</code>.
     */
    @Override
    public void setIssuingCertificate(Integer issuingCertificate) {
        this.issuingCertificate = issuingCertificate;
    }

    /**
     * Getter for <code>certificate.serial_number</code>.
     */
    @Override
    public BigInteger getSerialNumber() {
        return this.serialNumber;
    }

    /**
     * Setter for <code>certificate.serial_number</code>.
     */
    @Override
    public void setSerialNumber(BigInteger serialNumber) {
        this.serialNumber = serialNumber;
    }

    /**
     * Getter for <code>certificate.revocation_code</code>.
     */
    @Override
    public Integer getRevocationCode() {
        return this.revocationCode;
    }

    /**
     * Setter for <code>certificate.revocation_code</code>.
     */
    @Override
    public void setRevocationCode(Integer revocationCode) {
        this.revocationCode = revocationCode;
    }

    /**
     * Getter for <code>certificate.revocation_date</code>.
     */
    @Override
    public LocalDateTime getRevocationDate() {
        return this.revocationDate;
    }

    /**
     * Setter for <code>certificate.revocation_date</code>.
     */
    @Override
    public void setRevocationDate(LocalDateTime revocationDate) {
        this.revocationDate = revocationDate;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Certificate other = (Certificate) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.alias == null) {
            if (other.alias != null)
                return false;
        }
        else if (!this.alias.equals(other.alias))
            return false;
        if (this.subjectName == null) {
            if (other.subjectName != null)
                return false;
        }
        else if (!this.subjectName.equals(other.subjectName))
            return false;
        if (this.subjectKeyId == null) {
            if (other.subjectKeyId != null)
                return false;
        }
        else if (!Arrays.equals(this.subjectKeyId, other.subjectKeyId))
            return false;
        if (this.subjectType == null) {
            if (other.subjectType != null)
                return false;
        }
        else if (!this.subjectType.equals(other.subjectType))
            return false;
        if (this.certDer == null) {
            if (other.certDer != null)
                return false;
        }
        else if (!Arrays.equals(this.certDer, other.certDer))
            return false;
        if (this.privateKeyEn == null) {
            if (other.privateKeyEn != null)
                return false;
        }
        else if (!Arrays.equals(this.privateKeyEn, other.privateKeyEn))
            return false;
        if (this.validFrom == null) {
            if (other.validFrom != null)
                return false;
        }
        else if (!this.validFrom.equals(other.validFrom))
            return false;
        if (this.validTo == null) {
            if (other.validTo != null)
                return false;
        }
        else if (!this.validTo.equals(other.validTo))
            return false;
        if (this.revocationMessage == null) {
            if (other.revocationMessage != null)
                return false;
        }
        else if (!this.revocationMessage.equals(other.revocationMessage))
            return false;
        if (this.issuingCertificate == null) {
            if (other.issuingCertificate != null)
                return false;
        }
        else if (!this.issuingCertificate.equals(other.issuingCertificate))
            return false;
        if (this.serialNumber == null) {
            if (other.serialNumber != null)
                return false;
        }
        else if (!this.serialNumber.equals(other.serialNumber))
            return false;
        if (this.revocationCode == null) {
            if (other.revocationCode != null)
                return false;
        }
        else if (!this.revocationCode.equals(other.revocationCode))
            return false;
        if (this.revocationDate == null) {
            if (other.revocationDate != null)
                return false;
        }
        else if (!this.revocationDate.equals(other.revocationDate))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.alias == null) ? 0 : this.alias.hashCode());
        result = prime * result + ((this.subjectName == null) ? 0 : this.subjectName.hashCode());
        result = prime * result + ((this.subjectKeyId == null) ? 0 : Arrays.hashCode(this.subjectKeyId));
        result = prime * result + ((this.subjectType == null) ? 0 : this.subjectType.hashCode());
        result = prime * result + ((this.certDer == null) ? 0 : Arrays.hashCode(this.certDer));
        result = prime * result + ((this.privateKeyEn == null) ? 0 : Arrays.hashCode(this.privateKeyEn));
        result = prime * result + ((this.validFrom == null) ? 0 : this.validFrom.hashCode());
        result = prime * result + ((this.validTo == null) ? 0 : this.validTo.hashCode());
        result = prime * result + ((this.revocationMessage == null) ? 0 : this.revocationMessage.hashCode());
        result = prime * result + ((this.issuingCertificate == null) ? 0 : this.issuingCertificate.hashCode());
        result = prime * result + ((this.serialNumber == null) ? 0 : this.serialNumber.hashCode());
        result = prime * result + ((this.revocationCode == null) ? 0 : this.revocationCode.hashCode());
        result = prime * result + ((this.revocationDate == null) ? 0 : this.revocationDate.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Certificate (");

        sb.append(id);
        sb.append(", ").append(alias);
        sb.append(", ").append(subjectName);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(subjectType);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(validFrom);
        sb.append(", ").append(validTo);
        sb.append(", ").append(revocationMessage);
        sb.append(", ").append(issuingCertificate);
        sb.append(", ").append(serialNumber);
        sb.append(", ").append(revocationCode);
        sb.append(", ").append(revocationDate);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICertificate from) {
        setId(from.getId());
        setAlias(from.getAlias());
        setSubjectName(from.getSubjectName());
        setSubjectKeyId(from.getSubjectKeyId());
        setSubjectType(from.getSubjectType());
        setCertDer(from.getCertDer());
        setPrivateKeyEn(from.getPrivateKeyEn());
        setValidFrom(from.getValidFrom());
        setValidTo(from.getValidTo());
        setRevocationMessage(from.getRevocationMessage());
        setIssuingCertificate(from.getIssuingCertificate());
        setSerialNumber(from.getSerialNumber());
        setRevocationCode(from.getRevocationCode());
        setRevocationDate(from.getRevocationDate());
    }

    @Override
    public <E extends ICertificate> E into(E into) {
        into.from(this);
        return into;
    }
}
