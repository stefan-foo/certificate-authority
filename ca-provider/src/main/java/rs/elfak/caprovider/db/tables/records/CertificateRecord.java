/*
 * This file is generated by jOOQ.
 */
package rs.elfak.caprovider.db.tables.records;


import java.math.BigInteger;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;

import rs.elfak.caprovider.db.enums.SubjectType;
import rs.elfak.caprovider.db.tables.Certificate;
import rs.elfak.caprovider.db.tables.interfaces.ICertificate;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CertificateRecord extends UpdatableRecordImpl<CertificateRecord> implements Record14<Integer, String, String, byte[], SubjectType, byte[], byte[], LocalDateTime, LocalDateTime, String, Integer, BigInteger, Integer, LocalDateTime>, ICertificate {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>certificate.id</code>.
     */
    @Override
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>certificate.id</code>.
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>certificate.alias</code>.
     */
    @Override
    public void setAlias(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>certificate.alias</code>.
     */
    @Override
    public String getAlias() {
        return (String) get(1);
    }

    /**
     * Setter for <code>certificate.subject_name</code>.
     */
    @Override
    public void setSubjectName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>certificate.subject_name</code>.
     */
    @Override
    public String getSubjectName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>certificate.subject_key_id</code>.
     */
    @Override
    public void setSubjectKeyId(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>certificate.subject_key_id</code>.
     */
    @Override
    public byte[] getSubjectKeyId() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>certificate.subject_type</code>.
     */
    @Override
    public void setSubjectType(SubjectType value) {
        set(4, value);
    }

    /**
     * Getter for <code>certificate.subject_type</code>.
     */
    @Override
    public SubjectType getSubjectType() {
        return (SubjectType) get(4);
    }

    /**
     * Setter for <code>certificate.cert_der</code>.
     */
    @Override
    public void setCertDer(byte[] value) {
        set(5, value);
    }

    /**
     * Getter for <code>certificate.cert_der</code>.
     */
    @Override
    public byte[] getCertDer() {
        return (byte[]) get(5);
    }

    /**
     * Setter for <code>certificate.private_key_en</code>.
     */
    @Override
    public void setPrivateKeyEn(byte[] value) {
        set(6, value);
    }

    /**
     * Getter for <code>certificate.private_key_en</code>.
     */
    @Override
    public byte[] getPrivateKeyEn() {
        return (byte[]) get(6);
    }

    /**
     * Setter for <code>certificate.valid_from</code>.
     */
    @Override
    public void setValidFrom(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>certificate.valid_from</code>.
     */
    @Override
    public LocalDateTime getValidFrom() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>certificate.valid_to</code>.
     */
    @Override
    public void setValidTo(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>certificate.valid_to</code>.
     */
    @Override
    public LocalDateTime getValidTo() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>certificate.revocation_message</code>.
     */
    @Override
    public void setRevocationMessage(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>certificate.revocation_message</code>.
     */
    @Override
    public String getRevocationMessage() {
        return (String) get(9);
    }

    /**
     * Setter for <code>certificate.issuing_certificate</code>.
     */
    @Override
    public void setIssuingCertificate(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>certificate.issuing_certificate</code>.
     */
    @Override
    public Integer getIssuingCertificate() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>certificate.serial_number</code>.
     */
    @Override
    public void setSerialNumber(BigInteger value) {
        set(11, value);
    }

    /**
     * Getter for <code>certificate.serial_number</code>.
     */
    @Override
    public BigInteger getSerialNumber() {
        return (BigInteger) get(11);
    }

    /**
     * Setter for <code>certificate.revocation_code</code>.
     */
    @Override
    public void setRevocationCode(Integer value) {
        set(12, value);
    }

    /**
     * Getter for <code>certificate.revocation_code</code>.
     */
    @Override
    public Integer getRevocationCode() {
        return (Integer) get(12);
    }

    /**
     * Setter for <code>certificate.revocation_date</code>.
     */
    @Override
    public void setRevocationDate(LocalDateTime value) {
        set(13, value);
    }

    /**
     * Getter for <code>certificate.revocation_date</code>.
     */
    @Override
    public LocalDateTime getRevocationDate() {
        return (LocalDateTime) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, byte[], SubjectType, byte[], byte[], LocalDateTime, LocalDateTime, String, Integer, BigInteger, Integer, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Integer, String, String, byte[], SubjectType, byte[], byte[], LocalDateTime, LocalDateTime, String, Integer, BigInteger, Integer, LocalDateTime> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Certificate.CERTIFICATE.ID;
    }

    @Override
    public Field<String> field2() {
        return Certificate.CERTIFICATE.ALIAS;
    }

    @Override
    public Field<String> field3() {
        return Certificate.CERTIFICATE.SUBJECT_NAME;
    }

    @Override
    public Field<byte[]> field4() {
        return Certificate.CERTIFICATE.SUBJECT_KEY_ID;
    }

    @Override
    public Field<SubjectType> field5() {
        return Certificate.CERTIFICATE.SUBJECT_TYPE;
    }

    @Override
    public Field<byte[]> field6() {
        return Certificate.CERTIFICATE.CERT_DER;
    }

    @Override
    public Field<byte[]> field7() {
        return Certificate.CERTIFICATE.PRIVATE_KEY_EN;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Certificate.CERTIFICATE.VALID_FROM;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return Certificate.CERTIFICATE.VALID_TO;
    }

    @Override
    public Field<String> field10() {
        return Certificate.CERTIFICATE.REVOCATION_MESSAGE;
    }

    @Override
    public Field<Integer> field11() {
        return Certificate.CERTIFICATE.ISSUING_CERTIFICATE;
    }

    @Override
    public Field<BigInteger> field12() {
        return Certificate.CERTIFICATE.SERIAL_NUMBER;
    }

    @Override
    public Field<Integer> field13() {
        return Certificate.CERTIFICATE.REVOCATION_CODE;
    }

    @Override
    public Field<LocalDateTime> field14() {
        return Certificate.CERTIFICATE.REVOCATION_DATE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAlias();
    }

    @Override
    public String component3() {
        return getSubjectName();
    }

    @Override
    public byte[] component4() {
        return getSubjectKeyId();
    }

    @Override
    public SubjectType component5() {
        return getSubjectType();
    }

    @Override
    public byte[] component6() {
        return getCertDer();
    }

    @Override
    public byte[] component7() {
        return getPrivateKeyEn();
    }

    @Override
    public LocalDateTime component8() {
        return getValidFrom();
    }

    @Override
    public LocalDateTime component9() {
        return getValidTo();
    }

    @Override
    public String component10() {
        return getRevocationMessage();
    }

    @Override
    public Integer component11() {
        return getIssuingCertificate();
    }

    @Override
    public BigInteger component12() {
        return getSerialNumber();
    }

    @Override
    public Integer component13() {
        return getRevocationCode();
    }

    @Override
    public LocalDateTime component14() {
        return getRevocationDate();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAlias();
    }

    @Override
    public String value3() {
        return getSubjectName();
    }

    @Override
    public byte[] value4() {
        return getSubjectKeyId();
    }

    @Override
    public SubjectType value5() {
        return getSubjectType();
    }

    @Override
    public byte[] value6() {
        return getCertDer();
    }

    @Override
    public byte[] value7() {
        return getPrivateKeyEn();
    }

    @Override
    public LocalDateTime value8() {
        return getValidFrom();
    }

    @Override
    public LocalDateTime value9() {
        return getValidTo();
    }

    @Override
    public String value10() {
        return getRevocationMessage();
    }

    @Override
    public Integer value11() {
        return getIssuingCertificate();
    }

    @Override
    public BigInteger value12() {
        return getSerialNumber();
    }

    @Override
    public Integer value13() {
        return getRevocationCode();
    }

    @Override
    public LocalDateTime value14() {
        return getRevocationDate();
    }

    @Override
    public CertificateRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CertificateRecord value2(String value) {
        setAlias(value);
        return this;
    }

    @Override
    public CertificateRecord value3(String value) {
        setSubjectName(value);
        return this;
    }

    @Override
    public CertificateRecord value4(byte[] value) {
        setSubjectKeyId(value);
        return this;
    }

    @Override
    public CertificateRecord value5(SubjectType value) {
        setSubjectType(value);
        return this;
    }

    @Override
    public CertificateRecord value6(byte[] value) {
        setCertDer(value);
        return this;
    }

    @Override
    public CertificateRecord value7(byte[] value) {
        setPrivateKeyEn(value);
        return this;
    }

    @Override
    public CertificateRecord value8(LocalDateTime value) {
        setValidFrom(value);
        return this;
    }

    @Override
    public CertificateRecord value9(LocalDateTime value) {
        setValidTo(value);
        return this;
    }

    @Override
    public CertificateRecord value10(String value) {
        setRevocationMessage(value);
        return this;
    }

    @Override
    public CertificateRecord value11(Integer value) {
        setIssuingCertificate(value);
        return this;
    }

    @Override
    public CertificateRecord value12(BigInteger value) {
        setSerialNumber(value);
        return this;
    }

    @Override
    public CertificateRecord value13(Integer value) {
        setRevocationCode(value);
        return this;
    }

    @Override
    public CertificateRecord value14(LocalDateTime value) {
        setRevocationDate(value);
        return this;
    }

    @Override
    public CertificateRecord values(Integer value1, String value2, String value3, byte[] value4, SubjectType value5, byte[] value6, byte[] value7, LocalDateTime value8, LocalDateTime value9, String value10, Integer value11, BigInteger value12, Integer value13, LocalDateTime value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICertificate from) {
        setId(from.getId());
        setAlias(from.getAlias());
        setSubjectName(from.getSubjectName());
        setSubjectKeyId(from.getSubjectKeyId());
        setSubjectType(from.getSubjectType());
        setCertDer(from.getCertDer());
        setPrivateKeyEn(from.getPrivateKeyEn());
        setValidFrom(from.getValidFrom());
        setValidTo(from.getValidTo());
        setRevocationMessage(from.getRevocationMessage());
        setIssuingCertificate(from.getIssuingCertificate());
        setSerialNumber(from.getSerialNumber());
        setRevocationCode(from.getRevocationCode());
        setRevocationDate(from.getRevocationDate());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends ICertificate> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CertificateRecord
     */
    public CertificateRecord() {
        super(Certificate.CERTIFICATE);
    }

    /**
     * Create a detached, initialised CertificateRecord
     */
    public CertificateRecord(Integer id, String alias, String subjectName, byte[] subjectKeyId, SubjectType subjectType, byte[] certDer, byte[] privateKeyEn, LocalDateTime validFrom, LocalDateTime validTo, String revocationMessage, Integer issuingCertificate, BigInteger serialNumber, Integer revocationCode, LocalDateTime revocationDate) {
        super(Certificate.CERTIFICATE);

        setId(id);
        setAlias(alias);
        setSubjectName(subjectName);
        setSubjectKeyId(subjectKeyId);
        setSubjectType(subjectType);
        setCertDer(certDer);
        setPrivateKeyEn(privateKeyEn);
        setValidFrom(validFrom);
        setValidTo(validTo);
        setRevocationMessage(revocationMessage);
        setIssuingCertificate(issuingCertificate);
        setSerialNumber(serialNumber);
        setRevocationCode(revocationCode);
        setRevocationDate(revocationDate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CertificateRecord
     */
    public CertificateRecord(rs.elfak.caprovider.db.tables.pojos.Certificate value) {
        super(Certificate.CERTIFICATE);

        if (value != null) {
            setId(value.getId());
            setAlias(value.getAlias());
            setSubjectName(value.getSubjectName());
            setSubjectKeyId(value.getSubjectKeyId());
            setSubjectType(value.getSubjectType());
            setCertDer(value.getCertDer());
            setPrivateKeyEn(value.getPrivateKeyEn());
            setValidFrom(value.getValidFrom());
            setValidTo(value.getValidTo());
            setRevocationMessage(value.getRevocationMessage());
            setIssuingCertificate(value.getIssuingCertificate());
            setSerialNumber(value.getSerialNumber());
            setRevocationCode(value.getRevocationCode());
            setRevocationDate(value.getRevocationDate());
            resetChangedOnNotNull();
        }
    }
}
