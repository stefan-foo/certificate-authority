/*
 * This file is generated by jOOQ.
 */
package rs.elfak.caprovider.db.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;

import rs.elfak.caprovider.db.enums.RequestStatus;
import rs.elfak.caprovider.db.enums.RequestType;
import rs.elfak.caprovider.db.tables.CertificateRequest;
import rs.elfak.caprovider.db.tables.interfaces.ICertificateRequest;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CertificateRequestRecord extends UpdatableRecordImpl<CertificateRequestRecord> implements Record10<Integer, String, String, String, String, String, RequestType, LocalDateTime, RequestStatus, Integer>, ICertificateRequest {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>certificate_request.id</code>.
     */
    @Override
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>certificate_request.id</code>.
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>certificate_request.country</code>.
     */
    @Override
    public void setCountry(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>certificate_request.country</code>.
     */
    @Override
    public String getCountry() {
        return (String) get(1);
    }

    /**
     * Setter for <code>certificate_request.state</code>.
     */
    @Override
    public void setState(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>certificate_request.state</code>.
     */
    @Override
    public String getState() {
        return (String) get(2);
    }

    /**
     * Setter for <code>certificate_request.name</code>.
     */
    @Override
    public void setName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>certificate_request.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>certificate_request.organization</code>.
     */
    @Override
    public void setOrganization(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>certificate_request.organization</code>.
     */
    @Override
    public String getOrganization() {
        return (String) get(4);
    }

    /**
     * Setter for <code>certificate_request.email</code>.
     */
    @Override
    public void setEmail(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>certificate_request.email</code>.
     */
    @Override
    public String getEmail() {
        return (String) get(5);
    }

    /**
     * Setter for <code>certificate_request.request_type</code>.
     */
    @Override
    public void setRequestType(RequestType value) {
        set(6, value);
    }

    /**
     * Getter for <code>certificate_request.request_type</code>.
     */
    @Override
    public RequestType getRequestType() {
        return (RequestType) get(6);
    }

    /**
     * Setter for <code>certificate_request.timestamp</code>.
     */
    @Override
    public void setTimestamp(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>certificate_request.timestamp</code>.
     */
    @Override
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>certificate_request.status</code>.
     */
    @Override
    public void setStatus(RequestStatus value) {
        set(8, value);
    }

    /**
     * Getter for <code>certificate_request.status</code>.
     */
    @Override
    public RequestStatus getStatus() {
        return (RequestStatus) get(8);
    }

    /**
     * Setter for <code>certificate_request.certificate</code>.
     */
    @Override
    public void setCertificate(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>certificate_request.certificate</code>.
     */
    @Override
    public Integer getCertificate() {
        return (Integer) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, String, RequestType, LocalDateTime, RequestStatus, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Integer, String, String, String, String, String, RequestType, LocalDateTime, RequestStatus, Integer> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return CertificateRequest.CERTIFICATE_REQUEST.ID;
    }

    @Override
    public Field<String> field2() {
        return CertificateRequest.CERTIFICATE_REQUEST.COUNTRY;
    }

    @Override
    public Field<String> field3() {
        return CertificateRequest.CERTIFICATE_REQUEST.STATE;
    }

    @Override
    public Field<String> field4() {
        return CertificateRequest.CERTIFICATE_REQUEST.NAME;
    }

    @Override
    public Field<String> field5() {
        return CertificateRequest.CERTIFICATE_REQUEST.ORGANIZATION;
    }

    @Override
    public Field<String> field6() {
        return CertificateRequest.CERTIFICATE_REQUEST.EMAIL;
    }

    @Override
    public Field<RequestType> field7() {
        return CertificateRequest.CERTIFICATE_REQUEST.REQUEST_TYPE;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return CertificateRequest.CERTIFICATE_REQUEST.TIMESTAMP;
    }

    @Override
    public Field<RequestStatus> field9() {
        return CertificateRequest.CERTIFICATE_REQUEST.STATUS;
    }

    @Override
    public Field<Integer> field10() {
        return CertificateRequest.CERTIFICATE_REQUEST.CERTIFICATE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCountry();
    }

    @Override
    public String component3() {
        return getState();
    }

    @Override
    public String component4() {
        return getName();
    }

    @Override
    public String component5() {
        return getOrganization();
    }

    @Override
    public String component6() {
        return getEmail();
    }

    @Override
    public RequestType component7() {
        return getRequestType();
    }

    @Override
    public LocalDateTime component8() {
        return getTimestamp();
    }

    @Override
    public RequestStatus component9() {
        return getStatus();
    }

    @Override
    public Integer component10() {
        return getCertificate();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCountry();
    }

    @Override
    public String value3() {
        return getState();
    }

    @Override
    public String value4() {
        return getName();
    }

    @Override
    public String value5() {
        return getOrganization();
    }

    @Override
    public String value6() {
        return getEmail();
    }

    @Override
    public RequestType value7() {
        return getRequestType();
    }

    @Override
    public LocalDateTime value8() {
        return getTimestamp();
    }

    @Override
    public RequestStatus value9() {
        return getStatus();
    }

    @Override
    public Integer value10() {
        return getCertificate();
    }

    @Override
    public CertificateRequestRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CertificateRequestRecord value2(String value) {
        setCountry(value);
        return this;
    }

    @Override
    public CertificateRequestRecord value3(String value) {
        setState(value);
        return this;
    }

    @Override
    public CertificateRequestRecord value4(String value) {
        setName(value);
        return this;
    }

    @Override
    public CertificateRequestRecord value5(String value) {
        setOrganization(value);
        return this;
    }

    @Override
    public CertificateRequestRecord value6(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public CertificateRequestRecord value7(RequestType value) {
        setRequestType(value);
        return this;
    }

    @Override
    public CertificateRequestRecord value8(LocalDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public CertificateRequestRecord value9(RequestStatus value) {
        setStatus(value);
        return this;
    }

    @Override
    public CertificateRequestRecord value10(Integer value) {
        setCertificate(value);
        return this;
    }

    @Override
    public CertificateRequestRecord values(Integer value1, String value2, String value3, String value4, String value5, String value6, RequestType value7, LocalDateTime value8, RequestStatus value9, Integer value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICertificateRequest from) {
        setId(from.getId());
        setCountry(from.getCountry());
        setState(from.getState());
        setName(from.getName());
        setOrganization(from.getOrganization());
        setEmail(from.getEmail());
        setRequestType(from.getRequestType());
        setTimestamp(from.getTimestamp());
        setStatus(from.getStatus());
        setCertificate(from.getCertificate());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends ICertificateRequest> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CertificateRequestRecord
     */
    public CertificateRequestRecord() {
        super(CertificateRequest.CERTIFICATE_REQUEST);
    }

    /**
     * Create a detached, initialised CertificateRequestRecord
     */
    public CertificateRequestRecord(Integer id, String country, String state, String name, String organization, String email, RequestType requestType, LocalDateTime timestamp, RequestStatus status, Integer certificate) {
        super(CertificateRequest.CERTIFICATE_REQUEST);

        setId(id);
        setCountry(country);
        setState(state);
        setName(name);
        setOrganization(organization);
        setEmail(email);
        setRequestType(requestType);
        setTimestamp(timestamp);
        setStatus(status);
        setCertificate(certificate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CertificateRequestRecord
     */
    public CertificateRequestRecord(rs.elfak.caprovider.db.tables.pojos.CertificateRequest value) {
        super(CertificateRequest.CERTIFICATE_REQUEST);

        if (value != null) {
            setId(value.getId());
            setCountry(value.getCountry());
            setState(value.getState());
            setName(value.getName());
            setOrganization(value.getOrganization());
            setEmail(value.getEmail());
            setRequestType(value.getRequestType());
            setTimestamp(value.getTimestamp());
            setStatus(value.getStatus());
            setCertificate(value.getCertificate());
            resetChangedOnNotNull();
        }
    }
}
