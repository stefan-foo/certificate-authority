/*
 * This file is generated by jOOQ.
 */
package rs.elfak.ocspresponder.db.tables;


import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import rs.elfak.ocspresponder.db.DefaultSchema;
import rs.elfak.ocspresponder.db.Keys;
import rs.elfak.ocspresponder.db.enums.SubjectType;
import rs.elfak.ocspresponder.db.tables.records.CertificateRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Certificate extends TableImpl<CertificateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>certificate</code>
     */
    public static final Certificate CERTIFICATE = new Certificate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CertificateRecord> getRecordType() {
        return CertificateRecord.class;
    }

    /**
     * The column <code>certificate.id</code>.
     */
    public final TableField<CertificateRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>certificate.alias</code>.
     */
    public final TableField<CertificateRecord, String> ALIAS = createField(DSL.name("alias"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>certificate.subject_name</code>.
     */
    public final TableField<CertificateRecord, String> SUBJECT_NAME = createField(DSL.name("subject_name"), SQLDataType.VARCHAR(400).nullable(false), this, "");

    /**
     * The column <code>certificate.subject_key_id</code>.
     */
    public final TableField<CertificateRecord, byte[]> SUBJECT_KEY_ID = createField(DSL.name("subject_key_id"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>certificate.subject_type</code>.
     */
    public final TableField<CertificateRecord, SubjectType> SUBJECT_TYPE = createField(DSL.name("subject_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(rs.elfak.ocspresponder.db.enums.SubjectType.class), this, "");

    /**
     * The column <code>certificate.cert_der</code>.
     */
    public final TableField<CertificateRecord, byte[]> CERT_DER = createField(DSL.name("cert_der"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>certificate.private_key_en</code>.
     */
    public final TableField<CertificateRecord, byte[]> PRIVATE_KEY_EN = createField(DSL.name("private_key_en"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>certificate.valid_from</code>.
     */
    public final TableField<CertificateRecord, LocalDateTime> VALID_FROM = createField(DSL.name("valid_from"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>certificate.valid_to</code>.
     */
    public final TableField<CertificateRecord, LocalDateTime> VALID_TO = createField(DSL.name("valid_to"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>certificate.revocation_message</code>.
     */
    public final TableField<CertificateRecord, String> REVOCATION_MESSAGE = createField(DSL.name("revocation_message"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>certificate.issuing_certificate</code>.
     */
    public final TableField<CertificateRecord, Integer> ISSUING_CERTIFICATE = createField(DSL.name("issuing_certificate"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>certificate.serial_number</code>.
     */
    public final TableField<CertificateRecord, BigInteger> SERIAL_NUMBER = createField(DSL.name("serial_number"), SQLDataType.DECIMAL_INTEGER(40), this, "");

    /**
     * The column <code>certificate.revocation_code</code>.
     */
    public final TableField<CertificateRecord, Integer> REVOCATION_CODE = createField(DSL.name("revocation_code"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>certificate.revocation_date</code>.
     */
    public final TableField<CertificateRecord, LocalDateTime> REVOCATION_DATE = createField(DSL.name("revocation_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private Certificate(Name alias, Table<CertificateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Certificate(Name alias, Table<CertificateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>certificate</code> table reference
     */
    public Certificate(String alias) {
        this(DSL.name(alias), CERTIFICATE);
    }

    /**
     * Create an aliased <code>certificate</code> table reference
     */
    public Certificate(Name alias) {
        this(alias, CERTIFICATE);
    }

    /**
     * Create a <code>certificate</code> table reference
     */
    public Certificate() {
        this(DSL.name("certificate"), null);
    }

    public <O extends Record> Certificate(Table<O> child, ForeignKey<O, CertificateRecord> key) {
        super(child, key, CERTIFICATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<CertificateRecord, Integer> getIdentity() {
        return (Identity<CertificateRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CertificateRecord> getPrimaryKey() {
        return Keys.CERTIFICATE_PKEY;
    }

    @Override
    public List<UniqueKey<CertificateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CERTIFICATE_ALIAS_KEY);
    }

    @Override
    public List<ForeignKey<CertificateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CERTIFICATE__CERTIFICATE_ISSUING_CERTIFICATE_FKEY);
    }

    private transient Certificate _certificate;

    /**
     * Get the implicit join path to the <code>public.certificate</code> table.
     */
    public Certificate certificate() {
        if (_certificate == null)
            _certificate = new Certificate(this, Keys.CERTIFICATE__CERTIFICATE_ISSUING_CERTIFICATE_FKEY);

        return _certificate;
    }

    @Override
    public Certificate as(String alias) {
        return new Certificate(DSL.name(alias), this);
    }

    @Override
    public Certificate as(Name alias) {
        return new Certificate(alias, this);
    }

    @Override
    public Certificate as(Table<?> alias) {
        return new Certificate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Certificate rename(String name) {
        return new Certificate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Certificate rename(Name name) {
        return new Certificate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Certificate rename(Table<?> name) {
        return new Certificate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, byte[], SubjectType, byte[], byte[], LocalDateTime, LocalDateTime, String, Integer, BigInteger, Integer, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Integer, ? super String, ? super String, ? super byte[], ? super SubjectType, ? super byte[], ? super byte[], ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super BigInteger, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Integer, ? super String, ? super String, ? super byte[], ? super SubjectType, ? super byte[], ? super byte[], ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super BigInteger, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
