/*
 * This file is generated by jOOQ.
 */
package rs.elfak.ocspresponder.db.tables.daos;


import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import rs.elfak.ocspresponder.db.enums.SubjectType;
import rs.elfak.ocspresponder.db.tables.Certificate;
import rs.elfak.ocspresponder.db.tables.records.CertificateRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CertificateDao extends DAOImpl<CertificateRecord, rs.elfak.ocspresponder.db.tables.pojos.Certificate, Integer> {

    /**
     * Create a new CertificateDao without any configuration
     */
    public CertificateDao() {
        super(Certificate.CERTIFICATE, rs.elfak.ocspresponder.db.tables.pojos.Certificate.class);
    }

    /**
     * Create a new CertificateDao with an attached configuration
     */
    public CertificateDao(Configuration configuration) {
        super(Certificate.CERTIFICATE, rs.elfak.ocspresponder.db.tables.pojos.Certificate.class, configuration);
    }

    @Override
    public Integer getId(rs.elfak.ocspresponder.db.tables.pojos.Certificate object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchById(Integer... values) {
        return fetch(Certificate.CERTIFICATE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public rs.elfak.ocspresponder.db.tables.pojos.Certificate fetchOneById(Integer value) {
        return fetchOne(Certificate.CERTIFICATE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchOptionalById(Integer value) {
        return fetchOptional(Certificate.CERTIFICATE.ID, value);
    }

    /**
     * Fetch records that have <code>alias BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfAlias(String lowerInclusive, String upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.ALIAS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>alias IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchByAlias(String... values) {
        return fetch(Certificate.CERTIFICATE.ALIAS, values);
    }

    /**
     * Fetch a unique record that has <code>alias = value</code>
     */
    public rs.elfak.ocspresponder.db.tables.pojos.Certificate fetchOneByAlias(String value) {
        return fetchOne(Certificate.CERTIFICATE.ALIAS, value);
    }

    /**
     * Fetch a unique record that has <code>alias = value</code>
     */
    public Optional<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchOptionalByAlias(String value) {
        return fetchOptional(Certificate.CERTIFICATE.ALIAS, value);
    }

    /**
     * Fetch records that have <code>subject_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfSubjectName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.SUBJECT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subject_name IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchBySubjectName(String... values) {
        return fetch(Certificate.CERTIFICATE.SUBJECT_NAME, values);
    }

    /**
     * Fetch records that have <code>subject_key_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfSubjectKeyId(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.SUBJECT_KEY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subject_key_id IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchBySubjectKeyId(byte[]... values) {
        return fetch(Certificate.CERTIFICATE.SUBJECT_KEY_ID, values);
    }

    /**
     * Fetch records that have <code>subject_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfSubjectType(SubjectType lowerInclusive, SubjectType upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.SUBJECT_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subject_type IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchBySubjectType(SubjectType... values) {
        return fetch(Certificate.CERTIFICATE.SUBJECT_TYPE, values);
    }

    /**
     * Fetch records that have <code>cert_der BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfCertDer(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.CERT_DER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cert_der IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchByCertDer(byte[]... values) {
        return fetch(Certificate.CERTIFICATE.CERT_DER, values);
    }

    /**
     * Fetch records that have <code>private_key_en BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfPrivateKeyEn(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.PRIVATE_KEY_EN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>private_key_en IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchByPrivateKeyEn(byte[]... values) {
        return fetch(Certificate.CERTIFICATE.PRIVATE_KEY_EN, values);
    }

    /**
     * Fetch records that have <code>valid_from BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfValidFrom(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.VALID_FROM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>valid_from IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchByValidFrom(LocalDateTime... values) {
        return fetch(Certificate.CERTIFICATE.VALID_FROM, values);
    }

    /**
     * Fetch records that have <code>valid_to BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfValidTo(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.VALID_TO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>valid_to IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchByValidTo(LocalDateTime... values) {
        return fetch(Certificate.CERTIFICATE.VALID_TO, values);
    }

    /**
     * Fetch records that have <code>revocation_message BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfRevocationMessage(String lowerInclusive, String upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.REVOCATION_MESSAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>revocation_message IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchByRevocationMessage(String... values) {
        return fetch(Certificate.CERTIFICATE.REVOCATION_MESSAGE, values);
    }

    /**
     * Fetch records that have <code>issuing_certificate BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfIssuingCertificate(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.ISSUING_CERTIFICATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>issuing_certificate IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchByIssuingCertificate(Integer... values) {
        return fetch(Certificate.CERTIFICATE.ISSUING_CERTIFICATE, values);
    }

    /**
     * Fetch records that have <code>serial_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfSerialNumber(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.SERIAL_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>serial_number IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchBySerialNumber(BigInteger... values) {
        return fetch(Certificate.CERTIFICATE.SERIAL_NUMBER, values);
    }

    /**
     * Fetch records that have <code>revocation_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfRevocationCode(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.REVOCATION_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>revocation_code IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchByRevocationCode(Integer... values) {
        return fetch(Certificate.CERTIFICATE.REVOCATION_CODE, values);
    }

    /**
     * Fetch records that have <code>revocation_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchRangeOfRevocationDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Certificate.CERTIFICATE.REVOCATION_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>revocation_date IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.Certificate> fetchByRevocationDate(LocalDateTime... values) {
        return fetch(Certificate.CERTIFICATE.REVOCATION_DATE, values);
    }
}
