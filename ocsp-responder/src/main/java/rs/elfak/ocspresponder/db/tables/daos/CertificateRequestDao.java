/*
 * This file is generated by jOOQ.
 */
package rs.elfak.ocspresponder.db.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import rs.elfak.ocspresponder.db.enums.RequestStatus;
import rs.elfak.ocspresponder.db.enums.RequestType;
import rs.elfak.ocspresponder.db.tables.CertificateRequest;
import rs.elfak.ocspresponder.db.tables.records.CertificateRequestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CertificateRequestDao extends DAOImpl<CertificateRequestRecord, rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest, Integer> {

    /**
     * Create a new CertificateRequestDao without any configuration
     */
    public CertificateRequestDao() {
        super(CertificateRequest.CERTIFICATE_REQUEST, rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest.class);
    }

    /**
     * Create a new CertificateRequestDao with an attached configuration
     */
    public CertificateRequestDao(Configuration configuration) {
        super(CertificateRequest.CERTIFICATE_REQUEST, rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest.class, configuration);
    }

    @Override
    public Integer getId(rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchById(Integer... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest fetchOneById(Integer value) {
        return fetchOne(CertificateRequest.CERTIFICATE_REQUEST.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchOptionalById(Integer value) {
        return fetchOptional(CertificateRequest.CERTIFICATE_REQUEST.ID, value);
    }

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfCountry(String lowerInclusive, String upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.COUNTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchByCountry(String... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.COUNTRY, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchByState(String... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.STATE, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchByName(String... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.NAME, values);
    }

    /**
     * Fetch records that have <code>organization BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfOrganization(String lowerInclusive, String upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.ORGANIZATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>organization IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchByOrganization(String... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.ORGANIZATION, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchByEmail(String... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.EMAIL, values);
    }

    /**
     * Fetch records that have <code>request_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfRequestType(RequestType lowerInclusive, RequestType upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.REQUEST_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>request_type IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchByRequestType(RequestType... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.REQUEST_TYPE, values);
    }

    /**
     * Fetch records that have <code>timestamp BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfTimestamp(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timestamp IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchByTimestamp(LocalDateTime... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.TIMESTAMP, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfStatus(RequestStatus lowerInclusive, RequestStatus upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchByStatus(RequestStatus... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.STATUS, values);
    }

    /**
     * Fetch records that have <code>certificate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchRangeOfCertificate(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CertificateRequest.CERTIFICATE_REQUEST.CERTIFICATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>certificate IN (values)</code>
     */
    public List<rs.elfak.ocspresponder.db.tables.pojos.CertificateRequest> fetchByCertificate(Integer... values) {
        return fetch(CertificateRequest.CERTIFICATE_REQUEST.CERTIFICATE, values);
    }
}
